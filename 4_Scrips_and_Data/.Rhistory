Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > i & Speed < i+1))
# CH4Filtered1 <- CH4Data
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
print(head(CH4Filtered1))
if (nrow(CH4Filtered1) != 0) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > i & Speed < i+1))
# CH4Filtered1 <- CH4Data
print(nrow(CH4Filtered1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered1) != 0) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
View(CH4Data)
View(CH4Data)
print(filter(CH4Data, (Speed > 1 & Speed < 2)))
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
# CH4Filtered1 <- CH4Data
print(j)
print(nrow(CH4Filtered1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered1) != 0) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
# CH4Filtered1 <- CH4Data
print(j)
print(nrow(CH4Filtered1))
# for (i in seq(0, 350, by = 10)){
#     CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
#     # Calculate Pearson's correlation coefficient
#     if (nrow(CH4Filtered1) != 0) {
#     r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
#     p <- c(abs(r), i, i+10, j, j+10)
#     Correlation_Data <- rbind(Correlation_Data, p)
#     # Print the result
#     # print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
#   }
}
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
# CH4Filtered1 <- CH4Data
print(j)
print(nrow(CH4Filtered1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered1) != 0) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
# CH4Filtered1 <- CH4Data
print(j)
print(nrow(CH4Filtered1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered1) != 5) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
# CH4Filtered1 <- CH4Data
print(j)
print(nrow(CH4Filtered1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered1) != 20) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
# CH4Filtered1 <- CH4Data
print(j)
print(nrow(CH4Filtered1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered2) != 20) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
# CH4Filtered1 <- CH4Data
print(j)
print(nrow(CH4Filtered1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered2) != 0) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
# CH4Filtered1 <- CH4Data
print(j)
print(nrow(CH4Filtered1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered2) < 5) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
# CH4Filtered1 <- CH4Data
print(j)
print(nrow(CH4Filtered1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered2) > 5) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+10)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
View(Correlation_Data)
colnames(Correlation_Data) <- c("Correlation", "Direction_min", "Direction_max", "Speed_min", "Speed_max" )
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered2) > 5) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+1)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
colnames(Correlation_Data) <- c("Correlation", "Direction_min", "Direction_max", "Speed_min", "Speed_max" )
source("~/.active-rstudio-document", echo=TRUE)
ggplot(Correlation_Data, aes(Direction_min, Speed_min)) +
geom_raster(aes(fill = Correlation))
Correlation_Data <- data_frame()
for(j in seq(0, 27, by = 1)){
CH4Filtered1 <- filter(CH4Data, (Speed > j & Speed < j+1))
for (i in seq(0, 350, by = 10)){
CH4Filtered2 <- filter(CH4Filtered1, (Direction > i & Direction < i+10))
# Calculate Pearson's correlation coefficient
if (nrow(CH4Filtered2) > 2) {
r <- cor(CH4Filtered2$X.CH4., CH4Filtered2$Water_Level, use="complete.obs")
p <- c(abs(r), i, i+10, j, j+1)
Correlation_Data <- rbind(Correlation_Data, p)
# Print the result
# print(paste("Pearson's correlation coefficient:", round(r, 2), "Wind direction:", i, "-", i+10))
}
}
}
colnames(Correlation_Data) <- c("Correlation", "Direction_min", "Direction_max", "Speed_min", "Speed_max" )
ggplot(Correlation_Data, aes(Direction_min, Speed_min)) +
geom_raster(aes(fill = Correlation))
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Playing with Pearson's correlation coefficient.R", echo=TRUE)
ggplot()+
geom_rect(aes(xmin = Direction_min, ymin = , Speed_min = Direction_max, ymax = Speed_max,
fill = Correlation))
ggplot()+
geom_rect(aes(xmin = Direction_min, ymin = Speed_min, = Direction_max, ymax = Speed_max,
ggplot()+
geom_rect(aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation))
ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation))
ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation))+
labs(x = "Wind direction. Â°", y = "Wind speed, m/s", title = "Pearson's correlation coefficient for Methan and Elbe Waterlevel, depending on Wind Direction and Speed")
Correlation_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation))+
labs(x = "Wind direction. Â°", y = "Wind speed, m/s", title = "Pearson's correlation coefficient for Methan and Elbe Waterlevel, depending on Wind Direction and Speed")
ggsave("13_CH4_vs_Waterlevel_ Correlation.png", Correlation_Plot, path = "4_Data/OutputData/Plots", width = 10, height = 5)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Playing with Pearson's correlation coefficient.R", echo=TRUE)
# Create two vectors of data
x <- c(2, 4, 5, 7, 8)
y <- c(3, 5, 6, 7, 9)
# Calculate the Pearson's correlation coefficient and p-value
cor.test(x, y)
# Create two vectors of data
x <- c(2, 4, 5, 7, 8)
y <- c(2, 4, 5, 7, 8)
# Calculate the Pearson's correlation coefficient and p-value
cor.test(x, y)
# Calculate the Pearson's correlation coefficient and p-value
r <- cor.test(x, y)
# Create two vectors of data
x <- c(2, 4, 5, 7, 8)
y <- c(2, 5, 6, 7, 9)
# Calculate the Pearson's correlation coefficient and p-value
r <- cor.test(x, y)
r$p.value
r$conf.int
r$statistic
r
r$estimate
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Playing with Pearson's correlation coefficient.R", echo=TRUE)
ggsave(paste0("13_CH4_vs_Waterlevel_P_Value_",W_Name, ".png") , P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = ifelse(value>0.05, 'positive', 'negative')))+
labs(x = "Wind direction. Â°", y = "Wind speed, m/s", title = "P-value for Methan and Elbe Waterlevel, depending on Wind Direction and Speed")
ggsave(paste0("13_CH4_vs_Waterlevel_P_Value_",W_Name, ".png") , P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = ifelse(p-value>0.05, 'positive', 'negative')))+
labs(x = "Wind direction. Â°", y = "Wind speed, m/s", title = "P-value for Methan and Elbe Waterlevel, depending on Wind Direction and Speed")
ggsave(paste0("13_CH4_vs_Waterlevel_P_Value_",W_Name, ".png") , P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
colnames(Correlation_Data) <- c("Correlation", "Direction_min", "Direction_max", "Speed_min", "Speed_max", "p_value" )
P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = ifelse(p_value>0.05, 'positive', 'negative')))+
labs(x = "Wind direction. Â°", y = "Wind speed, m/s", title = "P-value for Methan and Elbe Waterlevel, depending on Wind Direction and Speed")
ggsave(paste0("13_CH4_vs_Waterlevel_P_Value_",W_Name, ".png") , P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = ifelse(p_value>0.05, 'Fail', 'Pass')))+
labs(x = "Wind direction. Â°", y = "Wind speed, m/s", title = "P-value for Methan and Elbe Waterlevel, depending on Wind Direction and Speed")
ggsave(paste0("13_CH4_vs_Waterlevel_P_Value_",W_Name, ".png") , P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = ifelse(p_value>0.05, 'Fail', 'Pass')))+
labs(x = "Wind direction. Â°", y = "Wind speed, m/s", title = "P-value Test for Methan and Elbe Waterlevel, depending on Wind Direction and Speed")+
cale_fill_discrete(name = "P-Test Results")
P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = ifelse(p_value>0.05, 'Fail', 'Pass')))+
labs(x = "Wind direction. Â°", y = "Wind speed, m/s", title = "P-value Test for Methan and Elbe Waterlevel, depending on Wind Direction and Speed")+
scale_fill_discrete(name = "P-Test Results")
ggsave(paste0("13_CH4_vs_Waterlevel_P_Value_",W_Name, ".png") , P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Playing with Pearson's correlation coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Humidity_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Humidity_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Humidity_Pearson_correlation_coefficient.R", echo=TRUE)
View(CH4Filtered2)
View(CH4Filtered2)
View(TotalData)
View(CH4Data)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Humidity_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Humidity_Pearson_correlation_coefficient.R", echo=TRUE)
View(TotalData)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Radiation_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Temperature_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Preasure_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Dew_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Precipitation_height_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Precipitation_height_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Precipitation_height_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Precipitation_height_Pearson_correlation_coefficient.R", echo=TRUE)
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
# Script to Plot the Data From the "CombineMeteorologicalData.csv" created by the script "Combine_All_Data_To_CSV_File.R"
# Author Juan Bettinelli
# Last change: 26.1.23
library(dplyr)
library(plotly)
library(rio)
#Set Working Directory, Set it into the folder "MasterThesis/4_Scrips_and_Data" to automatically access the data.
setwd("/Users/juanbettinelli/Documents/Uni/MasterThesis/4_Scrips_and_Data")
source("3_Scripts/Functions.R")
source("3_Scripts/CH4_Transportmodel.R")
StartTime <- as.POSIXct('2021-08-01 22:03:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
# Start Time: 2021-08-01 22:03:00
FinishTime <- as.POSIXct('2022-03-29 00:00:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
# Total Timeseries: 2022-03-29 00:00:00
# Hamburg Campagne Timeseries: 2021-09-06 00:00:00
# Hamburg Campaine #2: 2021-09-17 10:21:00
########### Read the CSV File #############
TotalData <- import("4_Data/OutputData/CombineMeteorologicalData.csv")
TotalData$UTC <- as.POSIXct(as.character(TotalData$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "UTC")
TotalData$X.CH4. <- as.numeric(TotalData$X.CH4.)
TotalData <- filter(TotalData, TotalData$UTC > StartTime & TotalData$UTC < FinishTime, .preserve = FALSE)
TotalData$UTC <- as.POSIXct(TotalData$UTC,
format = "%d-%m-%Y %H:%M:%S",
tz = "utc")
TotalData$Direction[TotalData$Direction > 361] <- NA
TotalData$Speed[TotalData$Speed > 99] <- NA
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
# Sort the dataset in ascending order
sorted_data <- sort(CH4Data)
#Select the Data from Dataframe with CH4 Concentration
CH4Data <- TotalData[complete.cases(TotalData[ , "X.CH4."]),c("UTC", "X.CH4.")]
# Sort the dataset in ascending order
sorted_data <- sort(CH4Data)
#Select the Data from Dataframe with CH4 Concentration
CH4Data <- TotalData[complete.cases(TotalData[ , "X.CH4."]),c("UTC", "X.CH4.")]
# Sort the dataset in ascending order
sorted_data <- sort(CH4Data)
# Sort the dataset in ascending order
sorted_data <- sort(CH4Data$X.CH4.)
# Determine the number of observations corresponding to the lowest 15% of the dataset
n_lowest <- round(length(CH4Data) * 0.15)
# Use the head() function to extract the lowest 15% of the dataset
lowest_15_percent <- head(sorted_data, n_lowest)
n_lowest
#Select the Data from Dataframe with CH4 Concentration
CH4Data <- TotalData[complete.cases(TotalData[ , "X.CH4."]),c("UTC", "X.CH4.")]
# Sort the dataset in ascending order
sorted_data <- sort(CH4Data$X.CH4.)
# Determine the number of observations corresponding to the lowest 15% of the dataset
n_lowest <- round(length(CH4Data) * 0.15)
# Use the head() function to extract the lowest 15% of the dataset
lowest_15_percent <- head(sorted_data, n_lowest)
n_lowest
lowest_15_percent
round(length(CH4Data) * 0.15)
length(CH4Data) * 0.15
length(CH4Data)
# Sort the dataset in ascending order
sorted_data <- sort(CH4Data$X.CH4.)
sorted_data
# Sort the dataset in ascending order
sorted_data <- sort(CH4Data$X.CH4.)
# Determine the number of observations corresponding to the lowest 15% of the dataset
n_lowest <- round(length(sorted_data) * 0.15)
# Use the head() function to extract the lowest 15% of the dataset
lowest_15_percent <- head(sorted_data, n_lowest)
lowest_15_percent
# Use the head() function to extract the lowest 15% of the dataset
lowest_15_percent <- max(head(sorted_data, n_lowest))
lowest_15_percent
n_lowest
# Find the Peaks in the timeline
CH4_Peaks <- as.data.frame(findpeaks(CH4Data$X.CH4.,minpeakheight = lowest_15_percent, minpeakdistance = 15, threshold = 3, sortstr=TRUE)) # Strict peaks: CH4Data$X.CH4.,minpeakheight = 2400, minpeakdistance = 15, threshold = 5, sortstr=TRUE)
# Format the Peak Dataframe
names(CH4_Peaks) <- c("X.CH4.", "UTC", "UTC_Beginning", "UTC_Ending")
CH4_Peaks$UTC_Beginning <- CH4Data[CH4_Peaks$UTC_Beginning,"UTC"]
CH4_Peaks$UTC_Ending <- CH4Data[CH4_Peaks$UTC_Ending,"UTC"]
CH4_Peaks$UTC <- CH4Data[CH4_Peaks$UTC,"UTC"]
# Find the average during the Peak, (Average all values that lay between the Peak beginning and Peak End)
# get all Coloum Names
Heads <- colnames(TotalData)
Heads <- Heads[-1]
Heads <- Heads[-16]
for (j in Heads){
# Create new Coloums with same Names
CH4_Peaks[,j] <- NA
for(i in 1:nrow(CH4_Peaks)) {       # for-loop over rows
# Find the mean Values during the Peak
CH4_Peaks[i, j] <- mean(TotalData[TotalData$UTC >= CH4_Peaks[i,"UTC_Beginning"] & TotalData$UTC <= CH4_Peaks[i,"UTC_Ending"], j], na.rm = TRUE)
}
}
# Checks if the Data Should be returend to the Script ode exported into a CSV File
if (Export_CSV){
write.csv(CH4_Peaks, "4_Data/OutputData/CH4_Peaks.csv", row.names=TRUE)
}
View(CH4_Peaks)
source("3_Scripts/Functions.R")
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
source("3_Scripts/Functions.R")
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
CH4_Peaks
CH4_Peaks <- subset(CH4_Peaks, (UTC_Ending - UTC_Beginning) > 8*60*60 )
CH4_Peaks
library(dplyr)
library(plotly)
library(rio)
#Set Working Directory, Set it into the folder "MasterThesis/4_Scrips_and_Data" to automatically access the data.
setwd("/Users/juanbettinelli/Documents/Uni/MasterThesis/4_Scrips_and_Data")
source("3_Scripts/Functions.R")
source("3_Scripts/CH4_Transportmodel.R")
StartTime <- as.POSIXct('2021-08-01 22:03:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
# Start Time: 2021-08-01 22:03:00
FinishTime <- as.POSIXct('2022-03-29 00:00:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
# Total Timeseries: 2022-03-29 00:00:00
# Hamburg Campagne Timeseries: 2021-09-06 00:00:00
# Hamburg Campaine #2: 2021-09-17 10:21:00
########### Read the CSV File #############
TotalData <- import("4_Data/OutputData/CombineMeteorologicalData.csv")
TotalData$UTC <- as.POSIXct(as.character(TotalData$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "UTC")
TotalData$X.CH4. <- as.numeric(TotalData$X.CH4.)
TotalData <- filter(TotalData, TotalData$UTC > StartTime & TotalData$UTC < FinishTime, .preserve = FALSE)
TotalData$UTC <- as.POSIXct(TotalData$UTC,
format = "%d-%m-%Y %H:%M:%S",
tz = "utc")
TotalData$Direction[TotalData$Direction > 361] <- NA
TotalData$Speed[TotalData$Speed > 99] <- NA
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
source("3_Scripts/Functions.R")
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
source("3_Scripts/Functions.R")
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
source("3_Scripts/Functions.R")
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
source("3_Scripts/Functions.R")
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
source("3_Scripts/Functions.R")
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
source("3_Scripts/Functions.R")
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
source("3_Scripts/Functions.R")
########### 4 Plot CH4 Concentration Timeseries (Plot 4)##############
CH4_TimeLine(TotalData, StartTime, FinishTime, 10, FALSE) #CH4_TimeLine(ImputDataFrame = , StartTime = , FinishTime =, MumberOfPanels = (0=FixedPanelForPaper), TURE = OnePlotMultiplePanels FALSE = MultipePlotsOnePanel)
Particles_Tracks_Changing_Wind(TotalData = TotalData, No_of_Releast_Particals = 10, sd_Speed = 0.5, sd_Direction = 30, Wind_Provider = 1)
Particles_Tracks_Averaged_at_Peak_Wind(TotalData, Released_Particals = 10,  Backwared_Minutes = 60, sd_Speed = 0.5, sd_Direction = 30, Wind_Provider = 1)
Particles_Tracks_Averaged_at_Peak_Wind(TotalData, Released_Particals = 10,  Backwared_Minutes = 60, sd_Speed = 0.5, sd_Direction = 20, Wind_Provider = 1)
########### Transportmodel with measured wind for each time interval (Plot 10) ##############
# Wind_Provider = 1(Geomatikum), 2(Mast 50m) 3(Mast 110m), 4(DWD)
# Warning takes quit a wile !!!!!!
Particles_Tracks_Changing_Wind(TotalData = TotalData, No_of_Releast_Particals = 10, sd_Speed = 0.5, sd_Direction = 20, Wind_Provider = 1)
Correlation_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation))+
labs(x = "Wind direction. Â°", y = "Wind speed, m/s", title = "Pearson's correlation coefficient for Methan and Elbe Waterlevel, depending on Wind Direction and Speed")+
scale_color_gradientn(colours = rainbow(5))
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_",W_Name, ".png") , Correlation_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_WL_Pearson_correlation_coefficient.R", echo=TRUE)
