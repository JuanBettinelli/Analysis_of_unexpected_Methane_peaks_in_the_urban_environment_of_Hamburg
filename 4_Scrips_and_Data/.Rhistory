setwd("/Users/juanbettinelli/Documents/Uni/MasterThesis/4_Scrips_and_Data")
mydir = "4_Data/6_Water_Data"
myfiles = list.files(path=mydir,
pattern="*.csv",
full.names=TRUE)
WLTotal <- data.frame(stringsAsFactors=FALSE)
for (f in myfiles){
#Read Concentration Data of the CSV Files
WL_csv<- import(f, ";", escape_double = FALSE, trim_ws = TRUE)
WL_csv$UTC <- as.POSIXlt(WL_csv$UTC ,
format="%d.%m.%y %H:%M",
tz = "UTC")
#WL_csv$UTCTimeDate <- as.character(WL_csv$UTC , format="%Y%m%d%H%M")
WLTotal <- rbind(WLTotal, WL_csv)
}
library(lubridate)
library(dplyr)
library(plotly)
library(rio)
setwd("/Users/juanbettinelli/Documents/Uni/MasterThesis/4_Scrips_and_Data")
mydir = "4_Data/6_Water_Data"
myfiles = list.files(path=mydir,
pattern="*.csv",
full.names=TRUE)
WLTotal <- data.frame(stringsAsFactors=FALSE)
for (f in myfiles){
#Read Concentration Data of the CSV Files
WL_csv<- import(f, ";", escape_double = FALSE, trim_ws = TRUE)
WL_csv$UTC <- as.POSIXlt(WL_csv$UTC ,
format="%d.%m.%y %H:%M",
tz = "UTC")
#WL_csv$UTCTimeDate <- as.character(WL_csv$UTC , format="%Y%m%d%H%M")
WLTotal <- rbind(WLTotal, WL_csv)
}
View(WL_csv)
source("~/.active-rstudio-document", echo=TRUE)
View(WL_csv)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(WL_csv)
source("~/.active-rstudio-document", echo=TRUE)
View(WL_csv)
source("~/.active-rstudio-document", echo=TRUE)
View(WL_csv)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(WL_csv)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(WLTotal)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(WTotal)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot(WTotal$V1, WTotal$V2)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(WTotal2)
View(WTotal1)
View(WTotal2)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(W_csv3)
View(WTotal3)
View(WTotal2)
View(WTotal1)
source("~/.active-rstudio-document", echo=TRUE)
View(TotalData)
write.csv(TotalData,"4_Data/OutputData/CombineWaterData.csv", row.names = FALSE)
View(TotalData)
# Script to Combine all Data (Metro, Water, CH4) into one CSV File.
# Some Filtering is done
# Author: Juan Bettinelli
# Last Change: 19.1.23
library(lubridate)
library(dplyr)
library(plotly)
library(rio)
#Set Working Directory, Set it into the folder "MasterThesis/4_Scrips_and_Data" to automaticaly access the data.
setwd("/Users/juanbettinelli/Documents/Uni/MasterThesis/4_Scrips_and_Data")
# Set The Start and finish time to be exported into the CSV File
StartTime <- as.POSIXct('2021-08-01 00:00:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
FinishTime <- as.POSIXct('2022-03-29 00:00:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
######################### Water Level in Hamburg St Pauli (by WSV?????)  ############################
## File Meta Data
#ZRXPVERSION2206.235|*|ZRXPMODEStandard|*|ZRXPCREATORKisters ZRXP-Fileexporter|*|
#TZMEZ|*|SANR5952050|*|SNAMEHAMBURG ST. PAULI|*|SWATERElbe|*|CNR10|*|CNAMEW|*|
#CTYPEn-min-equi|*|CMW1440|*|RTIMELVLhigh-resolution|*|CUNITcm|*|RINVAL-777|*|
#RNR1440|*|REXCHANGE5952050_HAMBURGSTPAULI_W_W_1_O|*|RTYPEmean values|*|
#RORPROriginal|*|
#import data from csv File an adjust Date time formart
WSV_Waterlevel <- import("4_Data/4_Waterlevel/Water_Level_(20210701-20220505).csv", dec = ",")
colnames(WSV_Waterlevel) <- c("CET", "Water_Level")
WSV_Waterlevel$CET <- as.POSIXct(as.character(WSV_Waterlevel$CET),
tz = "Etc/GMT-1",
format = "%Y%m%d%H%M%S")
WSV_Waterlevel$UTC <- with_tz(WSV_Waterlevel$CET,
tzone = "UTC",
format = "%d-%m-%Y %H:%M:%S")
#Filter the usable Days
WSV_Waterlevel <- filter(WSV_Waterlevel, WSV_Waterlevel$UTC > StartTime & WSV_Waterlevel$UTC < FinishTime, .preserve = FALSE)
WSV_Waterlevel$CET      <- NULL
WSV_Waterlevel$Water_Level <- sapply(WSV_Waterlevel$Water_Level, gsub, pattern = ",", replacement= ".")
WSV_Waterlevel$Water_Level <- sapply(WSV_Waterlevel$Water_Level, as.numeric)
WSV_Waterlevel <- WSV_Waterlevel[!is.na(WSV_Waterlevel$UTC),]
########################## Water Data ##########################################
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
#Filter the usable Days
Water_Data <- filter(Water_Data, Water_Data$UTC > StartTime & Water_Data$UTC < FinishTime, .preserve = FALSE)
Water_Data <- Water_Data[!is.na(Water_Data$UTC),]
View(Water_Data)
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
Water_Data <- sapply(Water_Data, gsub, pattern = ",", replacement= ".")
#Filter the usable Days
Water_Data <- filter(Water_Data, Water_Data$UTC > StartTime & Water_Data$UTC < FinishTime, .preserve = FALSE)
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
Water_Data <- sapply(Water_Data, gsub, pattern = ",", replacement= ".")
#Filter the usable Days
Water_Data <- filter(Water_Data, Water_Data$UTC > StartTime & Water_Data$UTC < FinishTime, .preserve = FALSE)
View(Water_Data)
# Script to Combine all Data (Metro, Water, CH4) into one CSV File.
# Some Filtering is done
# Author: Juan Bettinelli
# Last Change: 19.1.23
library(lubridate)
library(dplyr)
library(plotly)
library(rio)
#Set Working Directory, Set it into the folder "MasterThesis/4_Scrips_and_Data" to automaticaly access the data.
setwd("/Users/juanbettinelli/Documents/Uni/MasterThesis/4_Scrips_and_Data")
# Set The Start and finish time to be exported into the CSV File
StartTime <- as.POSIXct('2021-08-01 00:00:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
FinishTime <- as.POSIXct('2022-03-29 00:00:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
######################### Water Level in Hamburg St Pauli (by WSV?????)  ############################
## File Meta Data
#ZRXPVERSION2206.235|*|ZRXPMODEStandard|*|ZRXPCREATORKisters ZRXP-Fileexporter|*|
#TZMEZ|*|SANR5952050|*|SNAMEHAMBURG ST. PAULI|*|SWATERElbe|*|CNR10|*|CNAMEW|*|
#CTYPEn-min-equi|*|CMW1440|*|RTIMELVLhigh-resolution|*|CUNITcm|*|RINVAL-777|*|
#RNR1440|*|REXCHANGE5952050_HAMBURGSTPAULI_W_W_1_O|*|RTYPEmean values|*|
#RORPROriginal|*|
#import data from csv File an adjust Date time formart
WSV_Waterlevel <- import("4_Data/4_Waterlevel/Water_Level_(20210701-20220505).csv", dec = ",")
colnames(WSV_Waterlevel) <- c("CET", "Water_Level")
WSV_Waterlevel$CET <- as.POSIXct(as.character(WSV_Waterlevel$CET),
tz = "Etc/GMT-1",
format = "%Y%m%d%H%M%S")
WSV_Waterlevel$UTC <- with_tz(WSV_Waterlevel$CET,
tzone = "UTC",
format = "%d-%m-%Y %H:%M:%S")
#Filter the usable Days
WSV_Waterlevel <- filter(WSV_Waterlevel, WSV_Waterlevel$UTC > StartTime & WSV_Waterlevel$UTC < FinishTime, .preserve = FALSE)
WSV_Waterlevel$CET      <- NULL
WSV_Waterlevel$Water_Level <- sapply(WSV_Waterlevel$Water_Level, gsub, pattern = ",", replacement= ".")
WSV_Waterlevel$Water_Level <- sapply(WSV_Waterlevel$Water_Level, as.numeric)
WSV_Waterlevel <- WSV_Waterlevel[!is.na(WSV_Waterlevel$UTC),]
########################## Water Data ##########################################
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
Water_Data <- sapply(Water_Data, gsub, pattern = ",", replacement= ".")
#Filter the usable Days
Water_Data <- filter(Water_Data, Water_Data$UTC > StartTime & Water_Data$UTC < FinishTime, .preserve = FALSE)
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data <- sapply(Water_Data, gsub, pattern = ",", replacement= ".")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
View(Water_Data)
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
Water_Data <- sapply(Water_Data[,-1], gsub, pattern = ",", replacement= ".")
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
#Filter the usable Days
Water_Data <- filter(Water_Data, Water_Data$UTC > StartTime & Water_Data$UTC < FinishTime, .preserve = FALSE)
Water_Data <- Water_Data[!is.na(Water_Data$UTC),]
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
Water_Data <- sapply(Water_Data, gsub, pattern = ",", replacement= ".")
#Filter the usable Days
Water_Data <- filter(Water_Data, Water_Data$UTC > StartTime & Water_Data$UTC < FinishTime, .preserve = FALSE)
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
sapply(Water_Data, gsub, pattern = ",", replacement= ".")
#Filter the usable Days
Water_Data <- filter(Water_Data, Water_Data$UTC > StartTime & Water_Data$UTC < FinishTime, .preserve = FALSE)
Water_Data <- Water_Data[!is.na(Water_Data$UTC),]
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Combine_All_Data_To_CSV_File_testing.R", echo=TRUE)
View(TotalData)
View(TotalData)
#Load the data from the csv file, and Convert the datetime to the correct format, 10 Minutes and 1 Hour Avereaged Data is avaiable
Water_Data <- import("4_Data/OutputData/CombineWaterData.csv")
Water_Data$UTC <- as.POSIXct(as.character(Water_Data$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "utc")
Water_Data[,-1] <- sapply(Water_Data[,-1], gsub, pattern = ",", replacement= ".")
View(WSV_Waterlevel)
View(Water_Data)
#Filter the usable Days
Water_Data <- filter(Water_Data, Water_Data$UTC > StartTime & Water_Data$UTC < FinishTime, .preserve = FALSE)
Water_Data <- Water_Data[!is.na(Water_Data$UTC),]
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Combine_All_Data_To_CSV_File_testing.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Water_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Water_Pearson_correlation_coefficient.R", echo=TRUE)
View(CH4Filtered1)
View(CH4Filtered2)
View(TotalData)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Water_Pearson_correlation_coefficient.R", echo=TRUE)
View(TotalData)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_Water_Pearson_correlation_coefficient.R", echo=TRUE)
