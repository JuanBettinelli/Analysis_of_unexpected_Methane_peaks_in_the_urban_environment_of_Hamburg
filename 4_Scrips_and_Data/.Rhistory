CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level*500, 4320, na.pad=TRUE)*1),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~./500,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level/5, 4320, na.pad=TRUE)*1),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~.*5,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level/50, 4320, na.pad=TRUE)*1),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~.*50,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level*1, 4320, na.pad=TRUE)*1),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~./1,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level*1, 4320, na.pad=TRUE)*1),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~./5,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level*1, 4320, na.pad=TRUE)*1),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~.*5,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level, 4320, na.pad=TRUE)*5),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~./5,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level, 4320, na.pad=TRUE)*3),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~./5,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level, 4320, na.pad=TRUE)*4),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~./5,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level, 4320, na.pad=TRUE)*4),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~./4,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level, 4320, na.pad=TRUE)*3.8),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~./3.8,
name="Water Level, mm"))
CH4_TimeLine
# Plot CH4, Waterlevel Vs Time
CH4_TimeLine <- ggplot(TotalData_CH4_WL) +
geom_line(aes(x = UTC,
y = rollmean(X.CH4., 2160, na.pad=TRUE)),
col = "red") +
labs(x = "Fill Time [UTC]",
y =expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration & Elbe water level vs. time") +
scale_x_datetime(date_breaks = "1 month",
date_labels = "%d-%b") +
# limits = c(as.POSIXct('2021-08-01 00:00:00',
#                       format = "%Y-%m-%d %H:%M:%S",
#                       tz ="utc"), as.POSIXct('2021-08-18 00:00:00',
#                                              format = "%Y-%m-%d %H:%M:%S",
#                                              tz ="utc"))) +
theme(axis.text.x=element_text(angle=60, hjust=1),
axis.title.y = element_text(color = "red",
size=13),
axis.text.y = element_text(color = "red"),
axis.title.y.right = element_text(color = "blue",
size=13),
axis.text.y.right = element_text(color = "blue"),
strip.text.x = element_blank()) +
geom_line(aes(x = UTC,
y = rollmean(Water_Level, 2160, na.pad=TRUE)*3.8),
col = "blue") +
scale_y_continuous(sec.axis = sec_axis(trans = ~./3.8,
name="Water Level, mm"))
CH4_TimeLine
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_WL_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_WL_Pearson_correlation_coefficient.R", echo=TRUE)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(p_value>0.05, 0.9, 0.1)))+
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Correlation_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = 0))+ # ifelse(p_value>0.05, 0.9, 0.1)
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Correlation_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = 1))+ # ifelse(p_value>0.05, 0.9, 0.1)
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Correlation_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
testA <-  ifelse(p_value>0.05, 0.9, 0.1)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_WL_Pearson_correlation_coefficient.R", echo=TRUE)
View(Corr_P_value_Plot)
View(test)
testA <-  ifelse(Correlation_Data$p_value>0.05, 0.9, 0.1)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = testA))+ # ifelse(p_value>0.05, 0.9, 0.1)
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Correlation_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(Correlation_Data$p_value>0.05, 0.9, 0.1)))+ # ifelse(p_value>0.05, 0.9, 0.1)
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Correlation_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = 0.5))+ # ifelse(p_value>0.05, 0.9, 0.1)
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Correlation_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = 0))+ # ifelse(p_value>0.05, 0.9, 0.1)
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Correlation_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = 0))+ # ifelse(p_value>0.05, 0.9, 0.1)
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Corr_P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(p_value>0.05, 0.9, 0.1)))+ # ifelse(p_value>0.05, 0.9, 0.1)
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Corr_P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(p_value>0.05, 0, 1)))+
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Corr_P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(p_value>0.05, 0, 1)))+
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")+
scale_alpha_continuous(guide=FALSE)
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Corr_P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_WL_Pearson_correlation_coefficient.R", echo=TRUE)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(p_value>0.05, 0, 1)))+
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")+
scale_alpha_discrete(range = c(0, 1), guide=FALSE)
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Corr_P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(p_value>0.05, 0, 1)))+
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")+
scale_alpha_discrete(range = c(0, 1), guide=FALSE)
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Corr_P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(p_value>0.05, 0, 1)))+
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")+
scale_alpha_continuous(range = c(0, 1), guide=FALSE)
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Corr_P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(p_value>0.05, 0, 1)))+
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")+
scale_alpha(range = c(0, 1)) +
scale_alpha_continuous(guide=FALSE)
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Corr_P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
Corr_P_value_Plot <- ggplot()+
geom_rect(data = Correlation_Data,aes(xmin = Direction_min, ymin = Speed_min, xmax = Direction_max, ymax = Speed_max,
fill = Correlation,
alpha = ifelse(p_value>0.05, 0, 1)))+
scale_fill_gradient2(midpoint=0, low="red", mid="white",
high="green", space ="Lab" )+
labs(x = "Wind direction in °", y = "Wind speed in m/s", title = "Pearson's correlation coefficient between methane and Elbe water level, binned by wind direction and wind speed")+
scale_alpha_continuous(range = c(0, 1), guide=FALSE)
ggsave(paste0("13_CH4_vs_Waterlevel_Correlation_P_value_",W_Name, ".png") , Corr_P_value_Plot, path = "4_Data/OutputData/Plots/13_Correlation", width = 10, height = 5)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/CH4_WL_Pearson_correlation_coefficient.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/FTIR_CH4_Waterlevel.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/FTIR_CH4_Waterlevel.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/FTIR_CH4_Waterlevel.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/FTIR_CH4_Waterlevel.R", echo=TRUE)
View(TotalData)
TotalData <- import("4_Data/OutputData/CombineMeteorologicalData.csv")
TotalData$UTC <- as.POSIXct(as.character(TotalData$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "UTC")
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/FTIR_CH4_Waterlevel.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/FTIR_CH4_Waterlevel.R", echo=TRUE)
FTIRData$mc_xch4_sc <- as.numeric(FTIRData$mc_xch4_sc)
FTIRData$md_xch4_sc <- as.numeric(FTIRData$md_xch4_sd)
FTIRData$md_xch4_sc <- as.numeric(FTIRData$md_xch4_sc)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/FTIR_CH4_Waterlevel.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/FTIR_CH4_Waterlevel.R", echo=TRUE)
