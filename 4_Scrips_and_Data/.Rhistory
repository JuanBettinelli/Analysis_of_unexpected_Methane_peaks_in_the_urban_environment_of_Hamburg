source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
#Set Working Directory, Set it into the folder "MasterThesis/4_Scrips_and_Data" to automatically access the data.
setwd("/Users/juanbettinelli/Documents/Uni/MasterThesis/4_Scrips_and_Data")
StartTime <- as.POSIXct('2021-08-01 22:03:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
# Start Time: 2021-08-01 22:03:00
FinishTime <- as.POSIXct('2022-03-29 00:00:00',
format = "%Y-%m-%d %H:%M:%S",
tz ="utc")
# Total Timeseries: 2022-03-29 00:00:00
# Hamburg Campagne Timeseries: 2021-09-06 00:00:00
# Hamburg Campaine #2: 2021-09-17 10:21:00
########### Read the CSV File #############
TotalData <- import("4_Data/OutputData/CombineMeteorologicalData.csv")
TotalData$UTC <- as.POSIXct(as.character(TotalData$UTC),
format = "%Y-%m-%d %H:%M:%S",
tz = "UTC")
TotalData$X.CH4. <- as.numeric(TotalData$X.CH4.)
TotalData <- filter(TotalData, TotalData$UTC > StartTime & TotalData$UTC < FinishTime, .preserve = FALSE)
TotalData$UTC <- as.POSIXct(TotalData$UTC,
format = "%d-%m-%Y %H:%M:%S",
tz = "utc")
TotalData$Direction[TotalData$Direction > 361] <- NA
TotalData$Speed[TotalData$Speed > 99] <- NA
n <- 1
# calling funktions to splite timeline into Panels
TotalData <- panel_function(TotalData, n)
m <- panel_No_function(n)
#Select the Data from dataframe with CH4 Concentration
CH4Data <- TotalData[complete.cases(TotalData[ , "X.CH4."]),c("UTC", "X.CH4.", "panel")]
# Find the Methan Peaks
CH4_Peaks <- CH4_Peak_Finder(TotalData, FALSE)
CH4_Peaks$panel <- CH4Data[match(CH4_Peaks$UTC, CH4Data$UTC),"panel"]
CH4_min <- min(CH4Data$X.CH4.)
CH4_max <- max(CH4Data$X.CH4.)
Indifidual_Peaks <- data.frame(
Peak_No = numeric(0),
CH4 = numeric(0),
Time = character(0))
u <- 1
for (u in (1:nrow(CH4_Peaks))){
testCH4  <- TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 4*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 4*60*60) , "X.CH4." ]
testTime <- as.numeric(difftime(TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 4*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 4*60*60) ,"UTC" ], CH4_Peaks[u, "UTC"], units = "hours"))
Indifidual_Peaks_single <- data.frame(
Peak_No = u,
CH4 = testCH4,
Time = testTime
)
Indifidual_Peaks_single <- Indifidual_Peaks_single[complete.cases(Indifidual_Peaks_single[ , "CH4"]),c("Peak_No", "CH4", "Time")]
Indifidual_Peaks <- rbind(Indifidual_Peaks, Indifidual_Peaks_single)
}
CH4_Overlay <- ggplot(Indifidual_Peaks, aes(Time, CH4, group=Peak_No, colour=Peak_No)) +
geom_line()+
labs(x = "Hours from Peak center",
y = expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration vs. Time")+
scale_color_gradient(low="red", high="blue") #+
#stat_summary(fun = mean, geom = "smooth", aes(group = 1), color = "black", size = 2)
ggsave(paste0("4_CH4_Peaks_Overlay_Large",".png"),
CH4_Overlay,
path = "4_Data/OutputData/SecondPaper/Overlay_Peaks",
width = 20,
height = 10)
View(Indifidual_Peaks)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(df)
View(Indifidual_Peaks)
average_data <- Indifidual_Peaks %>%
group_by(Time) %>%
summarise(y = mean(CH4))
View(average_data)
plot(average_data)
# Generate some sample data
data <- runif(100, min = 0, max = 10)  # Random values between 0 and 10
# Define the bin boundaries
bin_width <- 2
bin_breaks <- seq(0, 10, by = bin_width)
# Create bins and calculate the average within each bin
data$bin <- cut(data, breaks = bin_breaks, labels = FALSE)
bin_averages <- tapply(data, data$bin, FUN = mean)
# Generate some sample data
data <- runif(100, min = 0, max = 10)  # Random values between 0 and 10
# Define the bin boundaries
bin_width <- 2
bin_breaks <- seq(0, 10, by = bin_width)
# Create bins and calculate the average within each bin
data$bin <- cut(data, breaks = bin_breaks, labels = FALSE)
bin_averages <- tapply(data, data$bin, FUN = mean)
# Create bins and calculate the average within each bin
data$bin <- cut(data, breaks = bin_breaks, labels = FALSE)
# Generate some sample data
data <- runif(100, min = 0, max = 10)  # Random values between 0 and 10
# Define the bin boundaries
bin_width <- 2
bin_breaks <- seq(0, 10, by = bin_width)
# Create bins and calculate the average within each bin
data$bin <- cut(data, breaks = bin_breaks, labels = FALSE)
# Generate some sample data
data <- runif(100, min = 0, max = 10)  # Random values between 0 and 10
# Define the bin boundaries
bin_width <- 2
bin_breaks <- seq(0, 10, by = bin_width)
# Create bins and calculate the average within each bin
bin_labels <- cut(data, breaks = bin_breaks, labels = FALSE)
data <- data.frame(data, bin = bin_labels)
bin_averages <- tapply(data$data, data$bin, FUN = mean)
# Create a bar plot of the bin averages
barplot(bin_averages, names.arg = bin_breaks[-length(bin_breaks)] + bin_width / 2,
main = "Average Values in Bins", xlab = "Bin Midpoints", ylab = "Average Value")
View(data)
# Define the bin boundaries
bin_width <- 0.25
bin_breaks <- seq(min(Indifidual_Peaks$Time), max(Indifidual_Peaks$Time), by = bin_width)
# Create bins and calculate the average within each bin
bin_labels <- cut(Indifidual_Peaks, breaks = bin_breaks, labels = FALSE)
# Create bins and calculate the average within each bin
bin_labels <- cut(Indifidual_Peaks$Time, breaks = bin_breaks, labels = FALSE)
data <- data.frame(Indifidual_Peaks, bin = bin_labels)
View(Indifidual_Peaks)
View(data)
bin_averages <- tapply(data$data, data$bin, FUN = mean)
bin_averages <- tapply(data$CH4, data$bin, FUN = mean)
View(data)
bin_averages <- tapply(data$CH4, data$bin, FUN = mean)
# Create a bar plot of the bin averages
barplot(bin_averages, names.arg = bin_breaks[-length(bin_breaks)] + bin_width / 2,
main = "Average Values in Bins", xlab = "Bin Midpoints", ylab = "Average Value")
plot(average_data)
# Create a bar plot of the bin averages
barplot(bin_averages, names.arg = bin_breaks[-length(bin_breaks)] + bin_width / 2,
main = "Average Values in Bins", xlab = "Bin Midpoints", ylab = "Average Value")
# Create a bar plot of the bin averages
barplot(bin_averages, names.arg = bin_breaks[-length(bin_breaks)] + bin_width / 2,
main = "Average Values in Bins", xlab = "Bin Midpoints", ylab = "Average Value")
# Generate some sample data
data <- runif(100, min = 0, max = 10)  # Random values between 0 and 10
# Define the bin boundaries
bin_width <- 2
bin_breaks <- seq(0, 10, by = bin_width)
# Create bins and calculate the average within each bin
bin_labels <- cut(data, breaks = bin_breaks, labels = FALSE)
data <- data.frame(data, bin = bin_labels)
bin_averages <- tapply(data$data, data$bin, FUN = mean)
# Create a bar plot of the bin averages
barplot(bin_averages, names.arg = bin_breaks[-length(bin_breaks)] + bin_width / 2,
main = "Average Values in Bins", xlab = "Bin Midpoints", ylab = "Average Value")
# Define the bin boundaries
bin_width <- 0.25
bin_breaks <- seq(min(Indifidual_Peaks$Time), max(Indifidual_Peaks$Time), by = bin_width)
# Create bins and calculate the average within each bin
bin_labels <- cut(Indifidual_Peaks$Time, breaks = bin_breaks, labels = FALSE)
data <- data.frame(Indifidual_Peaks, bin = bin_labels)
bin_averages <- tapply(data$CH4, data$bin, FUN = mean)
# Create a bar plot of the bin averages
barplot(bin_averages, names.arg = bin_breaks[-length(bin_breaks)] + bin_width / 2,
main = "Average Values in Bins", xlab = "Bin Midpoints", ylab = "Average Value")
length(bin_averages)
length(bin_breaks)
