Indifidual_Peaks <- data.frame(
Peak_No = numeric(0),
CH4 = numeric(0),
Time = character(0))
for (u in (1:nrow(CH4_Peaks))){
Indifidual_Peaks[u, "Peak_No"] <- u
testCH4  <- TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 2*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 2*60*60) , "X.CH4." ]
testTime <- as.numeric(difftime(TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 2*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 2*60*60) ,"UTC" ], CH4_Peaks[u, "UTC"], units = "hours"))
Indifidual_Peaks_single <- data.frame(
Peak_No = u,
CH4 = testCH4,
Time = testTime
)
Indifidual_Peaks_single <- Indifidual_Peaks_single[complete.cases(Indifidual_Peaks_single[ , "CH4"]),c("Peak_No", "CH4", "Time")]
Indifidual_Peaks <- cbind(Indifidual_Peaks, Indifidual_Peaks_single)
}
Panel_Plot <- FALSE
# Select Plot in Panels or in separate files
if (Panel_Plot == FALSE) {
CH4_Overlay <- ggplot()
# Loop throw individual panels
for (i in (0:(m-1))){
# Create the Timeline plot
for (j in (1:nrow(CH4_Peaks))){
CH4_Overlay <- CH4_Overlay + ggplot(CH4Data[CH4Data$panel == i, ], aes(x = UTC, y = X.CH4.)) +
geom_line() +
labs(x = "Fill Time [UTC]",
y = expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration vs. Time") +
scale_x_datetime(date_breaks = "2 day",
date_labels = "%d-%b",
limit=c(as.POSIXct(CH4_Peaks[j, "UTC"] - 2*60*60 ),as.POSIXct(CH4_Peaks[j, "UTC"]+ 2*60*60)))+
theme(axis.text.x=element_text(angle=60,
hjust=1),
strip.text.x = element_blank()) #,
#legend.position="none")+
# geom_rect(data=CH4_Peaks[CH4_Peaks$panel == i, ], inherit.aes=FALSE, aes(xmin=UTC_Beginning, xmax=UTC_Ending, ymin=CH4_min,
#                                                                          ymax=CH4_max, fill=Direction), alpha=0.3)+
# scale_fill_continuous(name = "Mean Wind Direction", limits = c(0, 360), breaks = seq(0, 360, by = 30), type = "viridis")+  # Add legend scale
# geom_point(data=CH4_Peaks[CH4_Peaks$panel == i, ], aes(x = UTC, y = X.CH4., col = "red"))
}
# Save the Plot
ggsave(paste0("4_CH4_Peaks_Overlay_Large",i,".png"),
CH4_Overlay,
path = "4_Data/OutputData/SecondPaper/Peak/CH4_Timeline",
width = 10,
height = 5)
}
}
# Select a plot with seperate panels
else if (Panel_Plot == TRUE){
l <- 1
# Create the Plot
CH4_Peak_Overlay <- ggplot(CH4Data, aes(x = UTC, y = X.CH4.)) +
geom_line() +
labs(x = "Fill Time [UTC]",
y = expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration vs. Time") +
scale_x_datetime(date_breaks = "2 day",
date_labels = "%d-%b",
limit=c(as.POSIXct(CH4_Peaks[l, "UTC_Beginning"] ),as.POSIXct(CH4_Peaks[l, "UTC_Ending"])))+
theme(axis.text.x=element_text(angle=60,
hjust=1),
strip.text.x = element_blank(),
legend.position="none")+
# geom_rect(data=CH4_Peaks, inherit.aes=FALSE, aes(xmin=UTC_Beginning, xmax=UTC_Ending, ymin=CH4_min,
#                                                  ymax=CH4_max, fill=Direction), alpha=0.3)+ #, group=group
# scale_fill_continuous(name = "Mean Wind Direction", limits = c(0, 360), breaks = seq(0, 360, by = 30), type = "viridis")+  # Add legend scale
# geom_point(data=CH4_Peaks, aes(x = UTC, y = X.CH4., col = "red"))
facet_wrap(~panel,
scales = 'free',
nrow = m)
# Save the plot
ggsave(paste0("4_CH4_Peaks_Overlay_Large.png"),
CH4_TimeLine,
path = "4_Data/OutputData/SecondPaper/Peak/CH4_Timeline",
width = 10,
height = 5)
}
#-------------------------------------------------------------------
# # TotalData_CH4 <- TotalData[complete.cases(TotalData[ , "X.CH4."]),]
# TotalData_CH4 <- TotalData[,c("UTC", "X.CH4.", "ERA5_BLH", "LIDAR_BLH", "panel")]
# TotalData_CH4 <- fill(TotalData_CH4, starts_with("ERA5_BLH"), .direction = "up")
# TotalData_CH4 <- fill(TotalData_CH4, starts_with("LIDAR_BLH"), .direction = "up")
#
# # WL_CH4_Data <- melt(TotalData_CH4, id.var="UTC")
# TotalData_CH4_BLH <- TotalData_CH4[complete.cases(TotalData_CH4[ , c("UTC", "X.CH4.")]),]
#
# #Select the Data from dataframe with CH4 Concentration
# # CH4Data <- TotalData[complete.cases(TotalData[ , "X.CH4."]),c("UTC", "X.CH4.", "panel")]
#
# # Select Plot in Panels or in separate files
# if (Panel_Plot == FALSE) {
#
#   # Loop throw individual panels
#   for (i in (0:(m-1))){
#     # Create the Timeline plot
#     CH4_TimeLine <- ggplot(TotalData_CH4_BLH[TotalData_CH4_BLH$panel == i, ], aes(x = UTC, y = X.CH4.)) +
#       geom_line() +
#       labs(x = "Fill Time [UTC]",
#            y = expression("CH"[4]*" concentration [ppb]"),
#            title = "Methane concentration vs. Time") +
#       scale_x_datetime(date_breaks = "2 day",
#                        date_labels = "%d-%b") + # , limit=c(as.POSIXct(StartTime),as.POSIXct(FinishTime))
#       # theme(axis.text.x=element_text(angle=60,
#       #                                hjust=1),
#       #       strip.text.x = element_blank())+ #,
#       #legend.position="none")+
#       geom_rect(data=CH4_Peaks[CH4_Peaks$panel == i, ], inherit.aes=FALSE, aes(xmin=UTC_Beginning, xmax=UTC_Ending, ymin=CH4_min,
#                                                                                ymax=CH4_max, fill=Direction), alpha=0.3)+
#       scale_fill_continuous(name = "Mean Wind Direction", limits = c(0, 360), breaks = seq(0, 360, by = 30), type = "viridis")+  # Add legend scale
#       geom_point(data=CH4_Peaks[CH4_Peaks$panel == i, ], aes(x = UTC, y = X.CH4., col = "red"))+
#       theme(axis.text.x=element_text(angle=60, hjust=1),
#             axis.title.y = element_text(color = "red",
#                                         size=13),
#             axis.text.y = element_text(color = "red"),
#             axis.title.y.right = element_text(color = "blue",
#                                               size=13),
#             axis.text.y.right = element_text(color = "blue"),
#             strip.text.x = element_blank()) +
#       geom_line(aes(x = UTC,
#                     y = ERA5_BLH*3),
#                 col = "blue") +
#       scale_y_continuous(sec.axis = sec_axis(trans = ~./3,
#                                              name="BLH, m"))
#
#     # Save the Plot
#     ggsave(paste0("4_CH4_Timeline_Wind_BLH_Large",i,".png"),
#            CH4_TimeLine,
#            path = "4_Data/OutputData/SecondPaper/Peak/CH4_Timeline",
#            width = 10,
#            height = 5)
#   }
# }
# # Select a plot with seperate panels
# else if (Panel_Plot == TRUE){
#
#   # Create the Plot
#   CH4_TimeLine <- ggplot(TotalData_CH4_BLH, aes(x = UTC, y = X.CH4.)) +
#     geom_line() +
#     labs(x = "Fill Time [UTC]",
#          y = expression("CH"[4]*" concentration [ppb]"),
#          title = "Methane concentration vs. Time") +
#     scale_x_datetime(date_breaks = "2 day",
#                      date_labels = "%d-%b") + # , limit=c(as.POSIXct(StartTime),as.POSIXct(FinishTime))
#     theme(axis.text.x=element_text(angle=60,
#                                    hjust=1),
#           strip.text.x = element_blank(),
#           legend.position="none")+
#     geom_rect(data=CH4_Peaks, inherit.aes=FALSE, aes(xmin=UTC_Beginning, xmax=UTC_Ending, ymin=CH4_min,
#                                                      ymax=CH4_max, fill=Direction), alpha=0.3)+ #, group=group
#     scale_fill_continuous(name = "Mean Wind Direction", limits = c(0, 360), breaks = seq(0, 360, by = 30), type = "viridis")+  # Add legend scale
#     geom_point(data=CH4_Peaks, aes(x = UTC, y = X.CH4., col = "red"))+
#     theme(axis.text.x=element_text(angle=60, hjust=1),
#           axis.title.y = element_text(color = "red",
#                                       size=13),
#           axis.text.y = element_text(color = "red"),
#           axis.title.y.right = element_text(color = "blue",
#                                             size=13),
#           axis.text.y.right = element_text(color = "blue"),
#           strip.text.x = element_blank()) +
#     geom_line(aes(x = UTC,
#                   y = ERA5_BLH*3),
#               col = "blue") +
#     scale_y_continuous(sec.axis = sec_axis(trans = ~./3,
#                                            name="BLH, m"))+
#     facet_wrap(~panel,
#                scales = 'free',
#                nrow = m)
#
#   # Save the plot
#   ggsave(paste0("4_CH4_Timeline_Panels_Wind_BLH_Large.png"),
#          CH4_TimeLine,
#          path = "4_Data/OutputData/SecondPaper/Peak/CH4_Timeline",
#          width = 10,
#          height = 5)
# }
}
#------------------------------------------------------------------------------------------------------------
#
# # Function to Generate Wind Rode Plots
# WindRose_Plots <- function(TotalData = TotalData){
#   library("dplyr")
#   # Get the Peaks from the data
#   CH4_Peaks <- CH4_Peak_Finder(TotalData, FALSE)
#
#   # Create and save a windrose Plot with the Total wind data from the Geomatikum
#   png("4_Data/OutputData/SecondPaper/WindRosePlots/WindRose_Total_Large.png")
#   windRose(TotalData, ws = "Speed", wd = "Direction", angle = 10)
#   dev.off()
#
#   # Create and save a Windrose Plot with the Averaged Geomatikum wind data at the methane Peaks
#   png("4_Data/OutputData/SecondPaper/WindRosePlots/WindRose_Peaks_Large.png")
#   windRose(CH4_Peaks, ws = "Speed", wd = "Direction", angle = 10)
#   dev.off()
#
#   # Create and save a Pollutionrose Plot with the Total data, Wind Data from the Geomatikum
#   png("4_Data/OutputData/SecondPaper/WindRosePlots/PollutionRose_Total_Large.png")
#   pollutionRose(TotalData, ws = "Speed", wd = "Direction", pollutant = "X.CH4.",statistic = "prop.mean", angle = 10)
#   dev.off()
#
#   # Create and save a Pollutionrose Plot Only from the Peaks, Wind Data from the Geomatikum
#   png("4_Data/OutputData/SecondPaper/WindRosePlots/PollutionRose_Peaks_Large.png")
#   pollutionRose(CH4_Peaks, ws = "Speed", wd = "Direction", pollutant = "X.CH4.",statistic = "prop.mean", angle = 10)
#   dev.off()
#
#
#   # Create and save a comparison Windrose with the total Wind data vs. the Peak wind data (At the Geomatikum)
#   All_Wind <- TotalData[complete.cases(TotalData[ , c("Speed", "Direction")]), c("UTC", "Speed", "Direction")]
#   All_Wind <- rename(All_Wind,c("ws_All"="Speed","wd_All"="Direction"))
#   Peaks_Wind <- CH4_Peaks[complete.cases(CH4_Peaks[ , c("Speed", "Direction")]), c("UTC", "Speed", "Direction")]
#   Peaks_Wind <- rename(Peaks_Wind,c("ws_Peaks"="Speed","wd_Peaks"="Direction"))
#   Wind_Compare <- merge( All_Wind, Peaks_Wind,
#                          by.x = "UTC",
#                          by.y = "UTC",
#                          all.x = TRUE,
#                          all.y = TRUE,
#                          sort = TRUE)
#
#   png("4_Data/OutputData/SecondPaper/WindRosePlots/Comparison_Total_Vs_Peaks_Large.png")
#   pollutionRose(Wind_Compare, ws = "ws_All", wd = "wd_All", ws2 = "ws_Peaks", wd2 = "wd_Peaks", angle = 10)
#   dev.off()
#
#
# }
#------------------------------------------------------------------------------------------------------------
n <- 1
# calling funktions to splite timeline into Panels
TotalData <- panel_function(TotalData, n)
m <- panel_No_function(n)
#Select the Data from dataframe with CH4 Concentration
CH4Data <- TotalData[complete.cases(TotalData[ , "X.CH4."]),c("UTC", "X.CH4.", "panel")]
# Find the Methan Peaks
CH4_Peaks <- CH4_Peak_Finder(TotalData, FALSE)
CH4_Peaks$panel <- CH4Data[match(CH4_Peaks$UTC, CH4Data$UTC),"panel"]
CH4_min <- min(CH4Data$X.CH4.)
CH4_max <- max(CH4Data$X.CH4.)
Indifidual_Peaks <- data.frame(
Peak_No = numeric(0),
CH4 = numeric(0),
Time = character(0))
Indifidual_Peaks[u, "Peak_No"] <- u
u <- 1
Indifidual_Peaks[u, "Peak_No"] <- u
testCH4  <- TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 2*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 2*60*60) , "X.CH4." ]
testTime <- as.numeric(difftime(TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 2*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 2*60*60) ,"UTC" ], CH4_Peaks[u, "UTC"], units = "hours"))
Indifidual_Peaks_single <- data.frame(
Peak_No = u,
CH4 = testCH4,
Time = testTime
)
Indifidual_Peaks_single <- Indifidual_Peaks_single[complete.cases(Indifidual_Peaks_single[ , "CH4"]),c("Peak_No", "CH4", "Time")]
Indifidual_Peaks <- cbind(Indifidual_Peaks, Indifidual_Peaks_single)
View(Indifidual_Peaks)
View(Indifidual_Peaks_single)
View(Indifidual_Peaks)
Indifidual_Peaks <- data.frame(
Peak_No = numeric(0),
CH4 = numeric(0),
Time = character(0))
Indifidual_Peaks <- rbind(Indifidual_Peaks, Indifidual_Peaks_single)
View(Indifidual_Peaks)
View(Indifidual_Peaks_single)
View(Indifidual_Peaks)
Indifidual_Peaks <- data.frame(
Peak_No = numeric(0),
CH4 = numeric(0),
Time = character(0))
u <- 1
for (u in (1:nrow(CH4_Peaks))){
Indifidual_Peaks[u, "Peak_No"] <- u
testCH4  <- TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 2*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 2*60*60) , "X.CH4." ]
testTime <- as.numeric(difftime(TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 2*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 2*60*60) ,"UTC" ], CH4_Peaks[u, "UTC"], units = "hours"))
Indifidual_Peaks_single <- data.frame(
Peak_No = u,
CH4 = testCH4,
Time = testTime
)
Indifidual_Peaks_single <- Indifidual_Peaks_single[complete.cases(Indifidual_Peaks_single[ , "CH4"]),c("Peak_No", "CH4", "Time")]
Indifidual_Peaks <- rbind(Indifidual_Peaks, Indifidual_Peaks_single)
}
View(Indifidual_Peaks)
View(Indifidual_Peaks)
View(Indifidual_Peaks_single)
View(Indifidual_Peaks)
Indifidual_Peaks <- data.frame(
Peak_No = numeric(0),
CH4 = numeric(0),
Time = character(0))
u <- 1
for (u in (1:nrow(CH4_Peaks))){
testCH4  <- TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 2*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 2*60*60) , "X.CH4." ]
testTime <- as.numeric(difftime(TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 2*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 2*60*60) ,"UTC" ], CH4_Peaks[u, "UTC"], units = "hours"))
Indifidual_Peaks_single <- data.frame(
Peak_No = u,
CH4 = testCH4,
Time = testTime
)
Indifidual_Peaks_single <- Indifidual_Peaks_single[complete.cases(Indifidual_Peaks_single[ , "CH4"]),c("Peak_No", "CH4", "Time")]
Indifidual_Peaks <- rbind(Indifidual_Peaks, Indifidual_Peaks_single)
}
View(Indifidual_Peaks_single)
View(Indifidual_Peaks)
# Load the ggplot2 library
library(ggplot2)
# Sample data
set.seed(42)
data <- data.frame(
x = seq(1, 10, by = 0.1),
y = cumsum(rnorm(91))
)
# Create a base ggplot plot
base_plot <- ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(title = "Overlayed Plots", x = "X-Axis", y = "Y-Axis")
# Create and overlay multiple plots using a loop
for (i in 1:4) {
# Create some additional data for overlay
additional_data <- data.frame(
x = data$x,
y = cumsum(rnorm(91, mean = 0.2))
)
# Add a new layer to the base plot for the overlay
base_plot <- base_plot + geom_line(data = additional_data, aes(x, y), color = paste0("red", i))
}
# Print the final plot with overlaid lines
print(base_plot)
ggplot(Indifidual_Peaks, aes(CH4, Time, group=Peak_No, colour=Peak_No))
+ geom_line()
ggplot(Indifidual_Peaks, aes(CH4, Time, group=Peak_No, colour=Peak_No)) +
geom_line()
ggplot(Indifidual_Peaks, aes(Time, CH4, group=Peak_No, colour=Peak_No)) +
geom_line()
CH4_Overlay <- ggplot(Indifidual_Peaks, aes(Time, CH4, group=Peak_No, colour=Peak_No)) +
geom_line()+
labs(x = "Hours from Peak center",
y = expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration vs. Time")
ggsave(paste0("4_CH4_Peaks_Overlay_Large",".png"),
CH4_Overlay,
path = "4_Data/OutputData/SecondPaper/Peak/CH4_Timeline",
width = 10,
height = 5)
CH4_Overlay <- ggplot(Indifidual_Peaks, aes(Time, CH4, group=Peak_No, colour=Peak_No)) +
geom_line()+
labs(x = "Hours from Peak center",
y = expression("CH"[4]*" concentration [ppb]"),
title = "Methane concentration vs. Time")
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
if(!require('ggplot2')) {
install.packages('ggplot2')
library('ggplot2')
}
source("~/.active-rstudio-document", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Large.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Medium.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Medium.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Medium.R", echo=TRUE)
n <- 1
# calling funktions to splite timeline into Panels
TotalData <- panel_function(TotalData, n)
m <- panel_No_function(n)
#Select the Data from dataframe with CH4 Concentration
CH4Data <- TotalData[complete.cases(TotalData[ , "X.CH4."]),c("UTC", "X.CH4.", "panel")]
# Find the Methan Peaks
CH4_Peaks <- CH4_Peak_Finder(TotalData, FALSE)
CH4_Peaks$panel <- CH4Data[match(CH4_Peaks$UTC, CH4Data$UTC),"panel"]
CH4_min <- min(CH4Data$X.CH4.)
CH4_max <- max(CH4Data$X.CH4.)
Indifidual_Peaks <- data.frame(
Peak_No = numeric(0),
CH4 = numeric(0),
Time = character(0))
u <- 1
for (u in (1:nrow(CH4_Peaks))){
testCH4  <- TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 4*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 4*60*60) , "X.CH4." ]
testTime <- as.numeric(difftime(TotalData[(TotalData$UTC >= CH4_Peaks[u, "UTC"] - 4*60*60) & (TotalData$UTC <= CH4_Peaks[u, "UTC"] + 4*60*60) ,"UTC" ], CH4_Peaks[u, "UTC"], units = "hours"))
Indifidual_Peaks_single <- data.frame(
Peak_No = u,
CH4 = testCH4,
Time = testTime
)
Indifidual_Peaks_single <- Indifidual_Peaks_single[complete.cases(Indifidual_Peaks_single[ , "CH4"]),c("Peak_No", "CH4", "Time")]
Indifidual_Peaks <- rbind(Indifidual_Peaks, Indifidual_Peaks_single)
}
Average_Peak <-  Indifidual_Peaks[order(Indifidual_Peaks$Time), ]
Average_Peak_zoo <- zoo(Indifidual_Peaks$CH4, order.by = Indifidual_Peaks$Time)
rolling_mean <- rollmean(Average_Peak_zoo, k = 0.4, align = "right")
rolling_mean <- rollmean(Average_Peak_zoo, k = 0.4, align = "right")
rolling_mean <- rollmean(Average_Peak_zoo, k = 4, align = "right")
View(Average_Peak)
Average_Peak_zoo <- zoo(Indifidual_Peaks$CH4)
rolling_mean <- rollmean(Average_Peak_zoo, k = 4, align = "right")
rolling_mean_df <- data.frame(
Time = numeric(rolling_mean),
RollingMean = coredata(rolling_mean)
)
rolling_mean_df <- data.frame(
Time = time(rolling_mean),
RollingMean = coredata(rolling_mean)
)
rolling_mean_df
Average_Peak <-  Indifidual_Peaks[order(Indifidual_Peaks$Time), ]
Average_Peak_zoo <- zoo(Indifidual_Peaks$CH4, order.by = data$Date)
Average_Peak <-  Indifidual_Peaks[order(Indifidual_Peaks$Time), ]
Average_Peak_zoo <- zoo(Indifidual_Peaks$CH4, order.by = Indifidual_Peaks$Time)
Average_Peak_zoo <- zoo(Indifidual_Peaks)
rolling_mean <- rollmean(Average_Peak_zoo, k = 4, align = "right")
rolling_mean <- rollmean(Average_Peak_zoo$CH4, k = 4, align = "right")
rolling_mean_df <- data.frame(
Time = time(rolling_mean),
RollingMean = coredata(rolling_mean)
)
View(rolling_mean_df)
rolling_mean
rolling_mean <- rollmean(Average_Peak_zoo$CH4, k = 4, align = "right")
rolling_mean
Average_Peak <-  Indifidual_Peaks[order(Indifidual_Peaks$Time), ]
Average_Peak_zoo <- zoo(Indifidual_Peaks, order.by = Indifidual_Peaks$Time)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
Average_Peak <-  Indifidual_Peaks[order(Indifidual_Peaks$Time), ]
weighted_mean <- function(x) {
weighted.mean(x, w = rep(1, length(x)))  # You can adjust the weights as needed
}
weighted_avg_data <- Average_Peak %>%
group_by(Time) %>%
summarize(WeightedAverage = weighted_mean(CH4))
weighted_avg_data
ggplot(weighted_avg_data, aes(Time, CH4))
Average_Peak <- as.data.frame(weighted_avg_data)
View(Average_Peak)
View(Average_Peak)
ggplot(Average_Peak, aes(Time, WeightedAverage))
ggplot(weighted_avg_data, aes(Time, WeightedAverage))
Average_Peak
ggplot(Average_Peak, aes(Time, WeightedAverage))+
geom_line
ggplot(Average_Peak, aes(Time, WeightedAverage))+
geom_line()
Average_Peak <-  Indifidual_Peaks[order(Indifidual_Peaks$Time), ]
weighted_mean <- function(x) {
weighted.mean(x, w = 10)  # You can adjust the weights as needed
}
weighted_avg_data <- Average_Peak %>%
group_by(Time) %>%
summarize(WeightedAverage = weighted_mean(CH4))
Average_Peak <-  Indifidual_Peaks[order(Indifidual_Peaks$Time), ]
weighted_mean <- function(x) {
weighted.mean(x, w = rep(10, length(x)))  # You can adjust the weights as needed
}
weighted_avg_data <- Average_Peak %>%
group_by(Time) %>%
summarize(WeightedAverage = weighted_mean(CH4))
Average_Peak <- as.data.frame(weighted_avg_data)
ggplot(Average_Peak, aes(Time, WeightedAverage))+
geom_line
Average_Peak <-  Indifidual_Peaks[order(Indifidual_Peaks$Time), ]
weighted_mean <- function(x) {
weighted.mean(x, w = rep(10, length(x)))  # You can adjust the weights as needed
}
weighted_avg_data <- Average_Peak %>%
group_by(Time) %>%
summarize(WeightedAverage = weighted_mean(CH4))
Average_Peak <- as.data.frame(weighted_avg_data)
ggplot(Average_Peak, aes(Time, WeightedAverage))+
geom_line
Average_Peak <-  Indifidual_Peaks[order(Indifidual_Peaks$Time), ]
weighted_mean <- function(x) {
weighted.mean(x, w = rep(1, length(x)))  # You can adjust the weights as needed
}
weighted_avg_data <- Average_Peak %>%
group_by(Time) %>%
summarize(WeightedAverage = weighted_mean(CH4))
Average_Peak <- as.data.frame(weighted_avg_data)
View(Average_Peak)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Medium.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Medium.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Medium.R", echo=TRUE)
source("~/Documents/Uni/MasterThesis/4_Scrips_and_Data/3_Scripts/Peaks_Overlay_Medium.R", echo=TRUE)
